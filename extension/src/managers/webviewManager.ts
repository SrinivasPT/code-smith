import * as vscode from "vscode";
import * as fs from "fs";
import * as path from "path";
import { WebviewManagerInterface, WebviewMessage } from "../types/interfaces";

export class WebviewManager implements WebviewManagerInterface {
  private panel: vscode.WebviewPanel | undefined;

  constructor(
    private context: vscode.ExtensionContext,
    private onMessage: (message: WebviewMessage) => void
  ) {}

  createWebviewPanel(): vscode.WebviewPanel {
    this.panel = vscode.window.createWebviewPanel(
      "codesmith",
      "CodeSmith",
      vscode.ViewColumn.One,
      {
        enableScripts: true,
      }
    );

    this.setupWebviewContent();
    this.setupMessageHandling();

    return this.panel;
  }

  private setupWebviewContent(): void {
    if (!this.panel) return;

    // Find the actual asset filenames generated by Vite
    const assetsPath = path.join(this.context.extensionPath, "webview", "dist", "assets");
    const jsFile = fs.readdirSync(assetsPath).find((f: string) => /^index.*\.js$/.test(f));
    const cssFile = fs.readdirSync(assetsPath).find((f: string) => /^index.*\.css$/.test(f));

    const scriptUri = this.panel.webview.asWebviewUri(
      vscode.Uri.file(path.join(assetsPath, jsFile ?? "index.js"))
    );

    // Read CSS content for inlining
    let cssContent = "";
    if (cssFile) {
      const cssFilePath = path.join(assetsPath, cssFile);
      cssContent = fs.readFileSync(cssFilePath, "utf8");
    }

    this.panel.webview.html = this.getWebviewContent(scriptUri, cssContent);
  }

  private setupMessageHandling(): void {
    if (!this.panel) return;

    this.panel.webview.onDidReceiveMessage(this.onMessage);
  }

  getWebviewContent(scriptUri: vscode.Uri, cssContent: string): string {
    return `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <style>${cssContent}</style>
  </head>
  <body>
    <div id="root"></div>
    <script src="${scriptUri}"></script>
  </body>
</html>`;
  }

  postMessage(message: WebviewMessage): void {
    if (this.panel) {
      this.panel.webview.postMessage(message);
    }
  }

  dispose(): void {
    if (this.panel) {
      this.panel.dispose();
      this.panel = undefined;
    }
  }
}
